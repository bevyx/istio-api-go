/*
Copyright 2018 Bevyx.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha3

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type EnvoyFilter_ListenerMatch_ListenerType string

const (
	// All listeners
	EnvoyFilter_ListenerMatch_ANY EnvoyFilter_ListenerMatch_ListenerType = "ANY"
	// Inbound listener in sidecar
	EnvoyFilter_ListenerMatch_SIDECAR_INBOUND EnvoyFilter_ListenerMatch_ListenerType = "SIDECAR_INBOUND"
	// Outbound listener in sidecar
	EnvoyFilter_ListenerMatch_SIDECAR_OUTBOUND EnvoyFilter_ListenerMatch_ListenerType = "SIDECAR_OUTBOUND"
	// Gateway listener
	EnvoyFilter_ListenerMatch_GATEWAY EnvoyFilter_ListenerMatch_ListenerType = "GATEWAY"
)

type EnvoyFilter_ListenerMatch_ListenerProtocol string

const (
	// All protocols
	EnvoyFilter_ListenerMatch_ALL EnvoyFilter_ListenerMatch_ListenerProtocol = "ALL"
	// HTTP or HTTPS (with termination) / HTTP2/gRPC
	EnvoyFilter_ListenerMatch_HTTP EnvoyFilter_ListenerMatch_ListenerProtocol = "HTTP"
	// Any non-HTTP listener
	EnvoyFilter_ListenerMatch_TCP EnvoyFilter_ListenerMatch_ListenerProtocol = "TCP"
)

// Index/position in the filter chain.
type EnvoyFilter_InsertPosition_Index string

const (
	// Insert first
	EnvoyFilter_InsertPosition_FIRST EnvoyFilter_InsertPosition_Index = "FIRST"
	// Insert last
	EnvoyFilter_InsertPosition_LAST EnvoyFilter_InsertPosition_Index = "LAST"
	// Insert before the named filter.
	EnvoyFilter_InsertPosition_BEFORE EnvoyFilter_InsertPosition_Index = "BEFORE"
	// Insert after the named filter.
	EnvoyFilter_InsertPosition_AFTER EnvoyFilter_InsertPosition_Index = "AFTER"
)

type EnvoyFilter_Filter_FilterType string

const (
	// placeholder
	EnvoyFilter_Filter_INVALID EnvoyFilter_Filter_FilterType = "INVALID"
	// Http filter
	EnvoyFilter_Filter_HTTP EnvoyFilter_Filter_FilterType = "HTTP"
	// Network filter
	EnvoyFilter_Filter_NETWORK EnvoyFilter_Filter_FilterType = "NETWORK"
)

// `EnvoyFilter` describes Envoy proxy-specific filters that can be used to
// customize the Envoy proxy configuration generated by Istio networking
// subsystem (Pilot). This feature must be used with care, as incorrect
// configurations could potentially destabilize the entire mesh.
//
// NOTE 1: Since this is break glass configuration, there will not be any
// backward compatibility across different Istio releases. In other words,
// this configuration is subject to change based on internal implementation
// of Istio networking subsystem.
//
// NOTE 2: When multiple EnvoyFilters are bound to the same workload, all filter
// configurations will be processed sequentially in order of creation time.
// The behavior is undefined if multiple EnvoyFilter configurations conflict
// with each other.
//
// The following example for Kubernetes enables Envoy's Lua filter for all
// inbound calls arriving at service port 8080 of the reviews service pod with
// labels "app: reviews".
//
// ```yaml
// apiVersion: networking.istio.io/v1alpha3
// kind: EnvoyFilter
// metadata:
//   name: reviews-lua
// spec:
//   workloadLabels:
//     app: reviews
//   filters:
//   - listenerMatch:
//       portNumber: 8080
//       listenerType: SIDECAR_INBOUND #will match with the inbound listener for reviews:8080
//     filterName: envoy.lua
//     filterType: HTTP
//     filterConfig:
//       inlineCode: |
//         ... lua code ...
// ```
type EnvoyFilterSpec struct {
	// One or more labels that indicate a specific set of pods/VMs whose
	// proxies should be configured to use these additional filters.  The
	// scope of label search is platform dependent. On Kubernetes, for
	// example, the scope includes pods running in all reachable
	// namespaces. Omitting the selector applies the filter to all proxies in
	// the mesh.
	// NOTE: There can be only one EnvoyFilter bound to a specific workload.
	// The behavior is undefined if multiple EnvoyFilter configurations are
	// specified for the same workload.
	WorkloadLabels map[string]string `json:"workload_labels,omitempty"`
	// REQUIRED: Envoy network filters/http filters to be added to matching
	// listeners.  When adding network filters to http connections, care
	// should be taken to ensure that the filter is added before
	// envoy.http_connection_manager.
	Filters []EnvoyFilter_Filter `json:"filters,omitempty"`
}

// Select a listener to add the filter to based on the match conditions.
// All conditions specified in the ListenerMatch must be met for the filter
// to be applied to a listener.
type EnvoyFilter_ListenerMatch struct {
	// The service port/gateway port to which traffic is being
	// sent/received. If not specified, matches all listeners. Even though
	// inbound listeners are generated for the instance/pod ports, only
	// service ports should be used to match listeners.
	PortNumber uint32 `json:"port_number,omitempty"`
	// Instead of using specific port numbers, a set of ports matching a
	// given port name prefix can be selected. E.g., "mongo" selects ports
	// named mongo-port, mongo, mongoDB, MONGO, etc. Matching is case
	// insensitive.
	PortNamePrefix string `json:"port_name_prefix,omitempty"`
	// Inbound vs outbound sidecar listener or gateway listener. If not specified,
	// matches all listeners.
	ListenerType EnvoyFilter_ListenerMatch_ListenerType `json:"listener_type,omitempty"`
	// Selects a class of listeners for the same protocol. If not
	// specified, applies to listeners on all protocols. Use the protocol
	// selection to select all HTTP listeners (includes HTTP2/gRPC/HTTPS
	// where Envoy terminates TLS) or all TCP listeners (includes HTTPS
	// passthrough using SNI).
	ListenerProtocol EnvoyFilter_ListenerMatch_ListenerProtocol `json:"listener_protocol,omitempty"`
	// One or more IP addresses to which the listener is bound. If
	// specified, should match at least one address in the list.
	Address []string `json:"address,omitempty"`
}

// Indicates the relative index in the filter chain where the filter should be inserted.
type EnvoyFilter_InsertPosition struct {
	// Position of this filter in the filter chain.
	Index EnvoyFilter_InsertPosition_Index `json:"index,omitempty"`
	// If BEFORE or AFTER position is specified, specify the name of the
	// filter relative to which this filter should be inserted.
	RelativeTo string `json:"relative_to,omitempty"`
}

// Envoy filters to be added to a network or http filter chain.
type EnvoyFilter_Filter struct {
	// Filter will be added to the listener only if the match conditions are true.
	// If not specified, the filters will be applied to all listeners.
	ListenerMatch *EnvoyFilter_ListenerMatch `json:"listener_match,omitempty"`
	// Insert position in the filter chain. Defaults to FIRST
	InsertPosition *EnvoyFilter_InsertPosition `json:"insert_position,omitempty"`
	// REQUIRED: The type of filter to instantiate.
	FilterType EnvoyFilter_Filter_FilterType `json:"filter_type,omitempty"`
	// REQUIRED: The name of the filter to instantiate. The name must match a supported
	// filter _compiled into_ Envoy.
	FilterName string `json:"filter_name,omitempty"`
	// REQUIRED: Filter specific configuration which depends on the filter being
	// instantiated.
	FilterConfig string `json:"filter_config,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// EnvoyFilter is the Schema for the EnvoyFilters API
// +k8s:openapi-gen=true
type EnvoyFilter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec EnvoyFilterSpec `json:"spec,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// EnvoyFilterList contains a list of EnvoyFilter
type EnvoyFilterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EnvoyFilter `json:"items"`
}

func init() {
	SchemeBuilder.Register(&EnvoyFilter{}, &EnvoyFilterList{})
}
